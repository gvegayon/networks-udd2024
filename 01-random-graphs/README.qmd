---
format: gfm
bibliography: ../references.bib
number-sections: true
title: Random graphs
---

# Introduction

In this section, we will focus on reviewing the most common random graph models, how these are used, and what things are important to consider when using them. Later on in the course, we will focus on Exponential-Family Random Graph Models (ERGMs), which are a generalization of the models we will discuss here.

# Erdős–Rényi model

The Erdős–Rényi model is the simplest random graph model. It is defined by two parameters: $n$ and $p$. The parameter $n$ is the number of nodes in the graph, and $p$ is the probability that any two nodes are connected by an edge. The model is named after Paul Erdős and Alfréd Rényi, who first introduced it in 1959.

Formally, we can describe the ER model as follows: $(V, E)$ where $V = \{1, \ldots, n\}$ and $E$ is a set of edges, where each edge is included with probability $p$.

::: {.callout-tip}
**Computing note**: In the case of large networks, sampling ER graphs can be done effectively in a two-step process. First, we sample the number of edges in the graph from a binomial distribution. Then, we sample the edges uniformly at random from the set of all possible edges. This is much more efficient than sampling each edge independently since the number of possible edges is much smaller than the number of possible graphs.
:::

Most of the time, the ER is used as a reference distribution for studying real-world networks. Nevertheless, using the ER model as a null model for a real-world network is not always a good idea, as it may inflate the type two error rate.

## Code example

```{r}
#| label: 01-er-random
#| message: false

# Model parameters
n <- 40
p <- 0.1

# Generating the graph, version 1
set.seed(3312)
g <- matrix(as.integer(runif(n * n) < p), nrow = n, ncol = n)
diag(g) <- 0

# Visualizing the network
library(igraph)
library(netplot)
nplot(graph_from_adjacency_matrix(g))
```

**Challenge 1**: How would you generate the graph using the two-step process described above?

**Challenge 2**: Using a Generalized-Linear-Model [GLM], estimate $p$ and its variance from the above network.

# Watts-Strogatz model

The second model in our list is the small-world model, introduced by Duncan Watts and Steven Strogatz in 1998. The model is defined by three parameters: $n$, $k$, and $p$. The parameter $n$ is the number of nodes in the graph, $k$ is the number of neighbors each node is connected to, and $p$ is the probability that an edge is rewired. As its name suggests, the networks sampled from this model hold the small-world property, which means that the average distance between any two nodes is small.

Networks from the WS model are generated as follows:

1. Start with a ring of $n$ nodes, where each node is connected to its $k$ nearest neighbors.

2. For each edge $(u, v)$, rewire it with probability $p$ by replacing it with a random edge $(u, w)$, where $w$ is chosen uniformly at random from the set of all nodes.

**Challenge:** How would you generate a WS graph using the two-step process described above?

## Code example

```{r}
#| label: 02-ws-random
#| message: false
# Creating a ring
n <- 10
V <- 1:n
k <- 3
p <- .2

E <- NULL
for (i in 1:k) {
  E <- rbind(E, cbind(V, c(V[-c(1:i)], V[1:i])))
}

# Generating the ring layout
lo <- layout_in_circle(graph_from_edgelist(E))

# Plotting with netplot
nplot(
  graph_from_edgelist(E),
  layout = lo
  )

# Rewiring
ids <- which(runif(nrow(E)) < p)
E[ids, 2] <- sample(V, length(ids), replace = TRUE)
nplot(
  graph_from_edgelist(E),
  layout = lo
  )
```


# References